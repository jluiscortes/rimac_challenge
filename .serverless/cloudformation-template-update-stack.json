{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "InitalizeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ms-appointment-dev-initalize"
      }
    },
    "UpdateStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ms-appointment-dev-updateStatus"
      }
    },
    "AppointmentPELogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ms-appointment-dev-appointmentPE"
      }
    },
    "AppointmentCLLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ms-appointment-dev-appointmentCL"
      }
    },
    "UpdateStatusFromSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ms-appointment-dev-updateStatusFromSQS"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "ms-appointment",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ms-appointment-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ms-appointment-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:*",
                    "dynamodb:*",
                    "sqs:*",
                    "events:PutEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "SQSAppointmentPE",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SQSAppointmentCL",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SQSConformityUpdate",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "ms-appointment",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "InitalizeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5298ebdb-a2ab",
          "S3Key": "serverless/ms-appointment/dev/1746309012175-2025-05-03T21:50:12.175Z/ms-appointment.zip"
        },
        "Handler": "src/appointment/setup.CreateAppointmentHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ms-appointment-dev-initalize",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:520411743437:AppointmentTopic",
            "DYNAMO_TABLE_NAME": "appointments",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "InitalizeLogGroup"
      ]
    },
    "UpdateStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5298ebdb-a2ab",
          "S3Key": "serverless/ms-appointment/dev/1746309012175-2025-05-03T21:50:12.175Z/ms-appointment.zip"
        },
        "Handler": "src/appointment/setup.UpdateAppointmentStatusHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ms-appointment-dev-updateStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:520411743437:AppointmentTopic",
            "DYNAMO_TABLE_NAME": "appointments",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateStatusLogGroup"
      ]
    },
    "AppointmentPELambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5298ebdb-a2ab",
          "S3Key": "serverless/ms-appointment/dev/1746309012175-2025-05-03T21:50:12.175Z/ms-appointment.zip"
        },
        "Handler": "src/appointment_pe/interfaces/sqs/handler.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ms-appointment-dev-appointmentPE",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:520411743437:AppointmentTopic",
            "DYNAMO_TABLE_NAME": "appointments",
            "MYSQL_HOST": "database-1.c8vq2oe4eoyh.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "qBZiZ5lUZm7KGNNbp3Ra",
            "MYSQL_DB": "Agendamiento",
            "MYSQL_PORT": "3306",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentPELogGroup"
      ]
    },
    "AppointmentCLLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5298ebdb-a2ab",
          "S3Key": "serverless/ms-appointment/dev/1746309012175-2025-05-03T21:50:12.175Z/ms-appointment.zip"
        },
        "Handler": "src/appointment_cl/interfaces/sqs/handler.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ms-appointment-dev-appointmentCL",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:520411743437:AppointmentTopic",
            "DYNAMO_TABLE_NAME": "appointments",
            "MYSQL_HOST": "database-1.c8vq2oe4eoyh.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "qBZiZ5lUZm7KGNNbp3Ra",
            "MYSQL_DB": "Agendamiento",
            "MYSQL_PORT": "3306",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentCLLogGroup"
      ]
    },
    "UpdateStatusFromSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5298ebdb-a2ab",
          "S3Key": "serverless/ms-appointment/dev/1746309012175-2025-05-03T21:50:12.175Z/ms-appointment.zip"
        },
        "Handler": "src/appointment/setup.SqsToUpdateStatus",
        "Runtime": "nodejs18.x",
        "FunctionName": "ms-appointment-dev-updateStatusFromSQS",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:520411743437:AppointmentTopic",
            "DYNAMO_TABLE_NAME": "appointments",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateStatusFromSQSLogGroup"
      ]
    },
    "InitalizeLambdaVersionUIzhiMjwtr5ECNlaF92bumtjNNXjEzlYmF4qNtHNzA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InitalizeLambdaFunction"
        },
        "CodeSha256": "nZXzj9yKl4Sbm6MEAoapaJQSygxnZYKynBdACC8AVEo="
      }
    },
    "UpdateStatusLambdaVersionJhvuXeSYSamE6bgQeWG9qCBzeCwgWK5MhemBANTrW2I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateStatusLambdaFunction"
        },
        "CodeSha256": "nZXzj9yKl4Sbm6MEAoapaJQSygxnZYKynBdACC8AVEo="
      }
    },
    "AppointmentPELambdaVersioneQPOxLqirj1kvc9haET9QwEKoJz41zj65Xbe3rM9S7A": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentPELambdaFunction"
        },
        "CodeSha256": "nZXzj9yKl4Sbm6MEAoapaJQSygxnZYKynBdACC8AVEo="
      }
    },
    "AppointmentCLLambdaVersionWeamtCJQVjVbAL7g4aCud1m0Fd7JKYGbWLZf5nZc8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentCLLambdaFunction"
        },
        "CodeSha256": "nZXzj9yKl4Sbm6MEAoapaJQSygxnZYKynBdACC8AVEo="
      }
    },
    "UpdateStatusFromSQSLambdaVersionhWo4IoSNgBC16CdrZfF4mIj8RkTY1jou8bzu8CC1Pqc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateStatusFromSQSLambdaFunction"
        },
        "CodeSha256": "nZXzj9yKl4Sbm6MEAoapaJQSygxnZYKynBdACC8AVEo="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-ms-appointment",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceInitalize": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "initalize",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpdateDashstatus": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "update-status",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodInitalizePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceInitalize"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InitalizeLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "InitalizeLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUpdateDashstatusPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdateDashstatus"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateStatusLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1746308999922": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodInitalizePost",
        "ApiGatewayMethodUpdateDashstatusPost"
      ]
    },
    "InitalizeLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "InitalizeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateStatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AppointmentPEEventSourceMappingSQSSQSAppointmentPE": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SQSAppointmentPE",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentPELambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "AppointmentCLEventSourceMappingSQSSQSAppointmentCL": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SQSAppointmentCL",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentCLLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "UpdateStatusFromSQSEventSourceMappingSQSSQSConformityUpdate": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SQSConformityUpdate",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateStatusFromSQSLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "AppointmentTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "AppointmentTopic"
      }
    },
    "SQSAppointmentPE": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "sqs_pe"
      }
    },
    "SubscriptionPE": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Ref": "AppointmentTopic"
        },
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "SQSAppointmentPE",
            "Arn"
          ]
        },
        "FilterPolicy": {
          "countryISO": [
            "PE"
          ]
        },
        "RawMessageDelivery": true
      }
    },
    "SQSPolicyPE": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "SQSAppointmentPE"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "sqs:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "SQSAppointmentPE",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "AppointmentTopic"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "SQSAppointmentCL": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "sqs_cl"
      }
    },
    "SubscriptionCL": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Ref": "AppointmentTopic"
        },
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "SQSAppointmentCL",
            "Arn"
          ]
        },
        "FilterPolicy": {
          "countryISO": [
            "CL"
          ]
        },
        "RawMessageDelivery": true
      }
    },
    "SQSPolicyCL": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "SQSAppointmentCL"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "sqs:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "SQSAppointmentCL",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "AppointmentTopic"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "SQSConformityUpdate": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "sqs_conformity_update"
      }
    },
    "SQSPolicyConformityUpdate": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "SQSConformityUpdate"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "sqs:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "SQSConformityUpdate",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Fn::Sub": "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "EventRuleAppointmentCreated": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventBusName": "default",
        "EventPattern": {
          "source": [
            "ms.appointment"
          ],
          "detailType": [
            "AppointmentCreated"
          ]
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SQSConformityUpdate",
                "Arn"
              ]
            },
            "Id": "TargetSQSConformityUpdate"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-5298ebdb-a2ab",
      "Export": {
        "Name": "sls-ms-appointment-dev-ServerlessDeploymentBucketName"
      }
    },
    "InitalizeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InitalizeLambdaVersionUIzhiMjwtr5ECNlaF92bumtjNNXjEzlYmF4qNtHNzA"
      },
      "Export": {
        "Name": "sls-ms-appointment-dev-InitalizeLambdaFunctionQualifiedArn"
      }
    },
    "UpdateStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateStatusLambdaVersionJhvuXeSYSamE6bgQeWG9qCBzeCwgWK5MhemBANTrW2I"
      },
      "Export": {
        "Name": "sls-ms-appointment-dev-UpdateStatusLambdaFunctionQualifiedArn"
      }
    },
    "AppointmentPELambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentPELambdaVersioneQPOxLqirj1kvc9haET9QwEKoJz41zj65Xbe3rM9S7A"
      },
      "Export": {
        "Name": "sls-ms-appointment-dev-AppointmentPELambdaFunctionQualifiedArn"
      }
    },
    "AppointmentCLLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentCLLambdaVersionWeamtCJQVjVbAL7g4aCud1m0Fd7JKYGbWLZf5nZc8"
      },
      "Export": {
        "Name": "sls-ms-appointment-dev-AppointmentCLLambdaFunctionQualifiedArn"
      }
    },
    "UpdateStatusFromSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateStatusFromSQSLambdaVersionhWo4IoSNgBC16CdrZfF4mIj8RkTY1jou8bzu8CC1Pqc"
      },
      "Export": {
        "Name": "sls-ms-appointment-dev-UpdateStatusFromSQSLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-ms-appointment-dev-ServiceEndpoint"
      }
    }
  }
}