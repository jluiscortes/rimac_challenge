{
  "service": {
    "service": "ms-appointment",
    "serviceObject": {
      "name": "ms-appointment"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "environment": {
        "SNS_TOPIC_ARN": {
          "Ref": "AppointmentTopic"
        },
        "DYNAMO_TABLE_NAME": "appointments"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:*",
                "dynamodb:*",
                "sqs:*",
                "events:*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ms-appointment-dev-create"
            }
          },
          "AppointmentPELogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ms-appointment-dev-appointmentPE"
            }
          },
          "AppointmentCLLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ms-appointment-dev-appointmentCL"
            }
          },
          "UpdateStatusFromSQSLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ms-appointment-dev-updateStatusFromSQS"
            }
          },
          "AppointmentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ms-appointment-dev-appointments"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "ms-appointment",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ms-appointment-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ms-appointment-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "SQSAppointmentPE",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SQSAppointmentCL",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SQSConformityUpdate",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "ms-appointment",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ms-appointment/dev/1746474904246-2025-05-05T19:55:04.246Z/ms-appointment.zip"
              },
              "Handler": "src/appointment/setup.CreateAppointmentHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ms-appointment-dev-create",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SNS_TOPIC_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC_ARN\"]"
                  },
                  "DYNAMO_TABLE_NAME": "appointments",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateLogGroup"
            ]
          },
          "AppointmentPELambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ms-appointment/dev/1746474904246-2025-05-05T19:55:04.246Z/ms-appointment.zip"
              },
              "Handler": "src/appointment_pe/interfaces/sqs/handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ms-appointment-dev-appointmentPE",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SNS_TOPIC_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC_ARN\"]"
                  },
                  "DYNAMO_TABLE_NAME": "appointments",
                  "MYSQL_HOST": "database-1.c8vq2oe4eoyh.us-east-1.rds.amazonaws.com",
                  "MYSQL_USER": "admin",
                  "MYSQL_PASSWORD": "qBZiZ5lUZm7KGNNbp3Ra",
                  "MYSQL_DB": "Agendamiento",
                  "MYSQL_PORT": "3306",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentPELogGroup"
            ]
          },
          "AppointmentCLLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ms-appointment/dev/1746474904246-2025-05-05T19:55:04.246Z/ms-appointment.zip"
              },
              "Handler": "src/appointment_cl/interfaces/sqs/handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ms-appointment-dev-appointmentCL",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SNS_TOPIC_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC_ARN\"]"
                  },
                  "DYNAMO_TABLE_NAME": "appointments",
                  "MYSQL_HOST": "database-1.c8vq2oe4eoyh.us-east-1.rds.amazonaws.com",
                  "MYSQL_USER": "admin",
                  "MYSQL_PASSWORD": "qBZiZ5lUZm7KGNNbp3Ra",
                  "MYSQL_DB": "Agendamiento",
                  "MYSQL_PORT": "3306",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentCLLogGroup"
            ]
          },
          "UpdateStatusFromSQSLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ms-appointment/dev/1746474904246-2025-05-05T19:55:04.246Z/ms-appointment.zip"
              },
              "Handler": "src/appointment/setup.SqsToUpdateStatus",
              "Runtime": "nodejs18.x",
              "FunctionName": "ms-appointment-dev-updateStatusFromSQS",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SNS_TOPIC_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC_ARN\"]"
                  },
                  "DYNAMO_TABLE_NAME": "appointments",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateStatusFromSQSLogGroup",
              "SQSConformityUpdate",
              "SQSPolicyConformityUpdate"
            ]
          },
          "AppointmentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ms-appointment/dev/1746474904246-2025-05-05T19:55:04.246Z/ms-appointment.zip"
              },
              "Handler": "src/appointment/setup.FindAllAppointmentHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ms-appointment-dev-appointments",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SNS_TOPIC_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC_ARN\"]"
                  },
                  "DYNAMO_TABLE_NAME": "appointments",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentsLogGroup"
            ]
          },
          "CreateLambdaVersionZcpCjgWseV1CmV3KNR6OiVEcGLqL47xyCiJ5NaM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateLambdaFunction"
              },
              "CodeSha256": "u869ysxFs4dZFIKmhAaAdCLyRFDcE5xXP0ANWC0gVQA="
            }
          },
          "AppointmentPELambdaVersionYUmy73tjKo7wj82hWd97ScrMwF2f6stE2MgzWueu5o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentPELambdaFunction"
              },
              "CodeSha256": "u869ysxFs4dZFIKmhAaAdCLyRFDcE5xXP0ANWC0gVQA="
            }
          },
          "AppointmentCLLambdaVersionm3UcpwYJo8Oa1OPit1QFH3AW3MrYNcvyppDin4bV8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentCLLambdaFunction"
              },
              "CodeSha256": "u869ysxFs4dZFIKmhAaAdCLyRFDcE5xXP0ANWC0gVQA="
            }
          },
          "UpdateStatusFromSQSLambdaVersionFwBIoPSIYxjo0eMoTIA3bqancOvix1PMllLoeI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateStatusFromSQSLambdaFunction"
              },
              "CodeSha256": "u869ysxFs4dZFIKmhAaAdCLyRFDcE5xXP0ANWC0gVQA="
            }
          },
          "AppointmentsLambdaVersion3jvsattWHn52KzWOaQ8jgQKVc6woMieCsGwUBnIA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentsLambdaFunction"
              },
              "CodeSha256": "u869ysxFs4dZFIKmhAaAdCLyRFDcE5xXP0ANWC0gVQA="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-ms-appointment",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAppointments": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "appointments",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppointmentsCreate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "PathPart": "create",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppointmentsCreateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointmentsCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppointmentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppointmentsCreatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointmentsCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAppointmentsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppointmentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AppointmentsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1746474895611": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAppointmentsCreateOptions",
              "ApiGatewayMethodAppointmentsOptions",
              "ApiGatewayMethodAppointmentsCreatePost",
              "ApiGatewayMethodAppointmentsGet"
            ]
          },
          "CreateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AppointmentsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AppointmentPEEventSourceMappingSQSSQSAppointmentPE": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "SQSAppointmentPE",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentPELambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "AppointmentCLEventSourceMappingSQSSQSAppointmentCL": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "SQSAppointmentCL",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentCLLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "UpdateStatusFromSQSEventSourceMappingSQSSQSConformityUpdate": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "SQSConformityUpdate",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateStatusFromSQSLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "AppointmentTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "AppointmentTopic"
            }
          },
          "SQSAppointmentPE": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "sqs_pe"
            }
          },
          "SubscriptionPE": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AppointmentTopic"
              },
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SQSAppointmentPE",
                  "Arn"
                ]
              },
              "FilterPolicy": {
                "countryISO": [
                  "PE"
                ]
              },
              "RawMessageDelivery": true
            }
          },
          "SQSPolicyPE": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SQSAppointmentPE"
                }
              ],
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "sqs:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SQSAppointmentPE",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "AppointmentTopic"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "SQSAppointmentCL": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "sqs_cl"
            }
          },
          "SubscriptionCL": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AppointmentTopic"
              },
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SQSAppointmentCL",
                  "Arn"
                ]
              },
              "FilterPolicy": {
                "countryISO": [
                  "CL"
                ]
              },
              "RawMessageDelivery": true
            }
          },
          "SQSPolicyCL": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SQSAppointmentCL"
                }
              ],
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "sqs:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SQSAppointmentCL",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "AppointmentTopic"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "SQSConformityUpdate": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "sqs_conformity_update"
            }
          },
          "SQSPolicyConformityUpdate": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SQSConformityUpdate"
                }
              ],
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "sqs:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SQSConformityUpdate",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            }
          },
          "EventRuleAppointmentCreated": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "Name": "AppointmentCreatedRule",
              "Description": "Regla para capturar eventos de AppointmentCreated",
              "EventBusName": "default",
              "EventPattern": {
                "source": [
                  "ms.appointment"
                ],
                "detail-type": [
                  "AppointmentCreated"
                ]
              },
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "SQSConformityUpdate",
                      "Arn"
                    ]
                  },
                  "Id": "TargetSQSConformityUpdate"
                }
              ]
            }
          },
          "EventBridgeToSQSPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:InvokeFunction",
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateStatusFromSQSLambdaFunction",
                  "Arn"
                ]
              },
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "EventRuleAppointmentCreated",
                  "Arn"
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-ms-appointment-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateLambdaVersionZcpCjgWseV1CmV3KNR6OiVEcGLqL47xyCiJ5NaM"
            },
            "Export": {
              "Name": "sls-ms-appointment-dev-CreateLambdaFunctionQualifiedArn"
            }
          },
          "AppointmentPELambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentPELambdaVersionYUmy73tjKo7wj82hWd97ScrMwF2f6stE2MgzWueu5o"
            },
            "Export": {
              "Name": "sls-ms-appointment-dev-AppointmentPELambdaFunctionQualifiedArn"
            }
          },
          "AppointmentCLLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentCLLambdaVersionm3UcpwYJo8Oa1OPit1QFH3AW3MrYNcvyppDin4bV8"
            },
            "Export": {
              "Name": "sls-ms-appointment-dev-AppointmentCLLambdaFunctionQualifiedArn"
            }
          },
          "UpdateStatusFromSQSLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateStatusFromSQSLambdaVersionFwBIoPSIYxjo0eMoTIA3bqancOvix1PMllLoeI"
            },
            "Export": {
              "Name": "sls-ms-appointment-dev-UpdateStatusFromSQSLambdaFunctionQualifiedArn"
            }
          },
          "AppointmentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentsLambdaVersion3jvsattWHn52KzWOaQ8jgQKVc6woMieCsGwUBnIA"
            },
            "Export": {
              "Name": "sls-ms-appointment-dev-AppointmentsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-ms-appointment-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "create": {
        "handler": "src/appointment/setup.CreateAppointmentHandler",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "appointments/create",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ms-appointment-dev-create",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateLambdaVersionZcpCjgWseV1CmV3KNR6OiVEcGLqL47xyCiJ5NaM"
      },
      "appointmentPE": {
        "handler": "src/appointment_pe/interfaces/sqs/handler.handler",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][3][\"Resource\"][0]"
              }
            }
          }
        ],
        "environment": {
          "MYSQL_HOST": "database-1.c8vq2oe4eoyh.us-east-1.rds.amazonaws.com",
          "MYSQL_USER": "admin",
          "MYSQL_PASSWORD": "qBZiZ5lUZm7KGNNbp3Ra",
          "MYSQL_DB": "Agendamiento",
          "MYSQL_PORT": "3306",
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "name": "ms-appointment-dev-appointmentPE",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AppointmentPELambdaVersionYUmy73tjKo7wj82hWd97ScrMwF2f6stE2MgzWueu5o"
      },
      "appointmentCL": {
        "handler": "src/appointment_cl/interfaces/sqs/handler.handler",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][3][\"Resource\"][1]"
              }
            }
          }
        ],
        "environment": {
          "MYSQL_HOST": "database-1.c8vq2oe4eoyh.us-east-1.rds.amazonaws.com",
          "MYSQL_USER": "admin",
          "MYSQL_PASSWORD": "qBZiZ5lUZm7KGNNbp3Ra",
          "MYSQL_DB": "Agendamiento",
          "MYSQL_PORT": "3306",
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "name": "ms-appointment-dev-appointmentCL",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AppointmentCLLambdaVersionm3UcpwYJo8Oa1OPit1QFH3AW3MrYNcvyppDin4bV8"
      },
      "updateStatusFromSQS": {
        "handler": "src/appointment/setup.SqsToUpdateStatus",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][3][\"Resource\"][2]"
              }
            }
          }
        ],
        "environment": {
          "DYNAMO_TABLE_NAME": "appointments",
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "dependsOn": [
          "SQSConformityUpdate",
          "SQSPolicyConformityUpdate"
        ],
        "name": "ms-appointment-dev-updateStatusFromSQS",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateStatusFromSQSLambdaVersionFwBIoPSIYxjo0eMoTIA3bqancOvix1PMllLoeI"
      },
      "appointments": {
        "handler": "src/appointment/setup.FindAllAppointmentHandler",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "appointments",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ms-appointment-dev-appointments",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AppointmentsLambdaVersion3jvsattWHn52KzWOaQ8jgQKVc6woMieCsGwUBnIA"
      }
    },
    "resources": {
      "Resources": {
        "AppointmentTopic": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "AppointmentTopic"
          }
        },
        "SQSAppointmentPE": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "sqs_pe"
          }
        },
        "SubscriptionPE": {
          "Type": "AWS::SNS::Subscription",
          "Properties": {
            "TopicArn": {
              "Ref": "AppointmentTopic"
            },
            "Protocol": "sqs",
            "Endpoint": {
              "Fn::GetAtt": [
                "SQSAppointmentPE",
                "Arn"
              ]
            },
            "FilterPolicy": {
              "countryISO": [
                "PE"
              ]
            },
            "RawMessageDelivery": true
          }
        },
        "SQSPolicyPE": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "SQSAppointmentPE"
              }
            ],
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "sqs:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "SQSAppointmentPE",
                      "Arn"
                    ]
                  },
                  "Condition": {
                    "ArnEquals": {
                      "aws:SourceArn": {
                        "Ref": "AppointmentTopic"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "SQSAppointmentCL": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "sqs_cl"
          }
        },
        "SubscriptionCL": {
          "Type": "AWS::SNS::Subscription",
          "Properties": {
            "TopicArn": {
              "Ref": "AppointmentTopic"
            },
            "Protocol": "sqs",
            "Endpoint": {
              "Fn::GetAtt": [
                "SQSAppointmentCL",
                "Arn"
              ]
            },
            "FilterPolicy": {
              "countryISO": [
                "CL"
              ]
            },
            "RawMessageDelivery": true
          }
        },
        "SQSPolicyCL": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "SQSAppointmentCL"
              }
            ],
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "sqs:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "SQSAppointmentCL",
                      "Arn"
                    ]
                  },
                  "Condition": {
                    "ArnEquals": {
                      "aws:SourceArn": {
                        "Ref": "AppointmentTopic"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "SQSConformityUpdate": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "sqs_conformity_update"
          }
        },
        "SQSPolicyConformityUpdate": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "SQSConformityUpdate"
              }
            ],
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "sqs:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "SQSConformityUpdate",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        },
        "EventRuleAppointmentCreated": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "Name": "AppointmentCreatedRule",
            "Description": "Regla para capturar eventos de AppointmentCreated",
            "EventBusName": "default",
            "EventPattern": {
              "source": [
                "ms.appointment"
              ],
              "detail-type": [
                "AppointmentCreated"
              ]
            },
            "State": "ENABLED",
            "Targets": [
              {
                "Arn": {
                  "Fn::GetAtt": [
                    "SQSConformityUpdate",
                    "Arn"
                  ]
                },
                "Id": "TargetSQSConformityUpdate"
              }
            ]
          }
        },
        "EventBridgeToSQSPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:InvokeFunction",
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateStatusFromSQSLambdaFunction",
                "Arn"
              ]
            },
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "EventRuleAppointmentCreated",
                "Arn"
              ]
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "ms-appointment",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/ms-appointment/dev/1746474904246-2025-05-05T19:55:04.246Z",
    "artifact": "ms-appointment.zip"
  }
}