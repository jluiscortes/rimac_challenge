{
  "C:\\Users\\jorgecortes\\OneDrive\\Documentos\\_RETOS_TECNICOS\\rimac_challenge\\serverless.ts": {
    "versionFramework": "4.14.2",
    "servicePath": "C:\\Users\\jorgecortes\\OneDrive\\Documentos\\_RETOS_TECNICOS\\rimac_challenge\\serverless.ts",
    "serviceConfigFileName": "serverless.ts",
    "service": {
      "service": "ms-appointment",
      "plugins": [
        "serverless-offline"
      ],
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "us-east-1",
        "deploymentBucket": "ms-appointment-deployment",
        "environment": {
          "SNS_TOPIC_ARN": {
            "Ref": "AppointmentTopic"
          },
          "DYNAMO_TABLE_NAME": "appointments"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "sns:*",
                  "dynamodb:*"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "deploymentBucketObject": {
          "name": "ms-appointment-deployment"
        },
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "InitalizeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/ms-appointment-dev-initalize"
              }
            },
            "UpdateStatusLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/ms-appointment-dev-updateStatus"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "ms-appointment",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ms-appointment-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ms-appointment-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "sns:*",
                            "dynamodb:*"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "ms-appointment",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "InitalizeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "ms-appointment-deployment",
                  "S3Key": "serverless/ms-appointment/dev/1746284419773-2025-05-03T15:00:19.773Z/ms-appointment.zip"
                },
                "Handler": "src/appointment/setup.CreateAppointmentHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "ms-appointment-dev-initalize",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "SNS_TOPIC_ARN": {
                      "Ref": "AppointmentTopic"
                    },
                    "DYNAMO_TABLE_NAME": "appointments",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "InitalizeLogGroup"
              ]
            },
            "UpdateStatusLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "ms-appointment-deployment",
                  "S3Key": "serverless/ms-appointment/dev/1746284419773-2025-05-03T15:00:19.773Z/ms-appointment.zip"
                },
                "Handler": "src/appointment/setup.UpdateAppointmentStatusHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "ms-appointment-dev-updateStatus",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "SNS_TOPIC_ARN": {
                      "Ref": "AppointmentTopic"
                    },
                    "DYNAMO_TABLE_NAME": "appointments",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateStatusLogGroup"
              ]
            },
            "InitalizeLambdaVersionWxBPJokILuOLJdCwqPR0RFqi7EQiMkdFNhyjjYs0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "InitalizeLambdaFunction"
                },
                "CodeSha256": "9HPHoeLr9zrT65QGTE9LG5MR1ZrnEkeITWiqcotoI/I="
              }
            },
            "UpdateStatusLambdaVersion1xmnXZWkZTDkT2Bebal5UR5FCtoFrTqqX1tQOc5wo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateStatusLambdaFunction"
                },
                "CodeSha256": "9HPHoeLr9zrT65QGTE9LG5MR1ZrnEkeITWiqcotoI/I="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-ms-appointment",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceInitalize": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "initalize",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUpdateDashstatus": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "update-status",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodInitalizePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceInitalize"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "InitalizeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "InitalizeLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUpdateDashstatusPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUpdateDashstatus"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateStatusLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateStatusLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1746284413968": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodInitalizePost",
                "ApiGatewayMethodUpdateDashstatusPost"
              ]
            },
            "InitalizeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "InitalizeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateStatusLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AppointmentTopic": {
              "Type": "AWS::SNS::Topic",
              "Properties": {
                "TopicName": "AppointmentTopic"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "ms-appointment-deployment",
              "Export": {
                "Name": "sls-ms-appointment-dev-ServerlessDeploymentBucketName"
              }
            },
            "InitalizeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "InitalizeLambdaVersionWxBPJokILuOLJdCwqPR0RFqi7EQiMkdFNhyjjYs0"
              },
              "Export": {
                "Name": "sls-ms-appointment-dev-InitalizeLambdaFunctionQualifiedArn"
              }
            },
            "UpdateStatusLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateStatusLambdaVersion1xmnXZWkZTDkT2Bebal5UR5FCtoFrTqqX1tQOc5wo"
              },
              "Export": {
                "Name": "sls-ms-appointment-dev-UpdateStatusLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-ms-appointment-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "initalize": {
          "handler": "src/appointment/setup.CreateAppointmentHandler",
          "events": [
            {
              "http": {
                "method": "post",
                "path": "initalize",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "ms-appointment-dev-initalize",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "InitalizeLambdaVersionWxBPJokILuOLJdCwqPR0RFqi7EQiMkdFNhyjjYs0"
        },
        "updateStatus": {
          "handler": "src/appointment/setup.UpdateAppointmentStatusHandler",
          "events": [
            {
              "http": {
                "method": "post",
                "path": "update-status",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "ms-appointment-dev-updateStatus",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateStatusLambdaVersion1xmnXZWkZTDkT2Bebal5UR5FCtoFrTqqX1tQOc5wo"
        }
      },
      "resources": {
        "Resources": {
          "AppointmentTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "AppointmentTopic"
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "deploymentBucket": "ms-appointment-deployment",
      "environment": {
        "SNS_TOPIC_ARN": {
          "Ref": "AppointmentTopic"
        },
        "DYNAMO_TABLE_NAME": "appointments"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:*",
                "dynamodb:*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "ms-appointment-deployment"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "InitalizeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ms-appointment-dev-initalize"
            }
          },
          "UpdateStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ms-appointment-dev-updateStatus"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "ms-appointment",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ms-appointment-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ms-appointment-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:*",
                          "dynamodb:*"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "ms-appointment",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "InitalizeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ms-appointment-deployment",
                "S3Key": "serverless/ms-appointment/dev/1746284419773-2025-05-03T15:00:19.773Z/ms-appointment.zip"
              },
              "Handler": "src/appointment/setup.CreateAppointmentHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ms-appointment-dev-initalize",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SNS_TOPIC_ARN": {
                    "Ref": "AppointmentTopic"
                  },
                  "DYNAMO_TABLE_NAME": "appointments",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "InitalizeLogGroup"
            ]
          },
          "UpdateStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ms-appointment-deployment",
                "S3Key": "serverless/ms-appointment/dev/1746284419773-2025-05-03T15:00:19.773Z/ms-appointment.zip"
              },
              "Handler": "src/appointment/setup.UpdateAppointmentStatusHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ms-appointment-dev-updateStatus",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SNS_TOPIC_ARN": {
                    "Ref": "AppointmentTopic"
                  },
                  "DYNAMO_TABLE_NAME": "appointments",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateStatusLogGroup"
            ]
          },
          "InitalizeLambdaVersionWxBPJokILuOLJdCwqPR0RFqi7EQiMkdFNhyjjYs0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "InitalizeLambdaFunction"
              },
              "CodeSha256": "9HPHoeLr9zrT65QGTE9LG5MR1ZrnEkeITWiqcotoI/I="
            }
          },
          "UpdateStatusLambdaVersion1xmnXZWkZTDkT2Bebal5UR5FCtoFrTqqX1tQOc5wo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateStatusLambdaFunction"
              },
              "CodeSha256": "9HPHoeLr9zrT65QGTE9LG5MR1ZrnEkeITWiqcotoI/I="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-ms-appointment",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceInitalize": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "initalize",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateDashstatus": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "update-status",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodInitalizePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceInitalize"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "InitalizeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "InitalizeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateDashstatusPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateDashstatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateStatusLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateStatusLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1746284413968": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodInitalizePost",
              "ApiGatewayMethodUpdateDashstatusPost"
            ]
          },
          "InitalizeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "InitalizeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateStatusLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateStatusLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AppointmentTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "AppointmentTopic"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "ms-appointment-deployment",
            "Export": {
              "Name": "sls-ms-appointment-dev-ServerlessDeploymentBucketName"
            }
          },
          "InitalizeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "InitalizeLambdaVersionWxBPJokILuOLJdCwqPR0RFqi7EQiMkdFNhyjjYs0"
            },
            "Export": {
              "Name": "sls-ms-appointment-dev-InitalizeLambdaFunctionQualifiedArn"
            }
          },
          "UpdateStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateStatusLambdaVersion1xmnXZWkZTDkT2Bebal5UR5FCtoFrTqqX1tQOc5wo"
            },
            "Export": {
              "Name": "sls-ms-appointment-dev-UpdateStatusLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-ms-appointment-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "import type { AWS } from '@serverless/typescript';\r\n\r\nconst config: AWS = {\r\n  service: 'ms-appointment',\r\n  plugins: ['serverless-offline'],\r\n  provider: {\r\n    name: 'aws',\r\n    runtime: 'nodejs18.x',\r\n    region: 'us-east-1',\r\n    deploymentBucket: {\r\n      name: 'ms-appointment-deployment'\r\n    },\r\n    environment: {\r\n      SNS_TOPIC_ARN: {\r\n        Ref: 'AppointmentTopic'\r\n      },\r\n      DYNAMO_TABLE_NAME: 'appointments',\r\n    },\r\n    iam: {\r\n      role: {\r\n        statements: [\r\n          {\r\n            Effect: 'Allow',\r\n            Action: [\r\n              'sns:*',\r\n              'dynamodb:*'\r\n            ],\r\n            Resource: '*'\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  functions: {\r\n    initalize: {\r\n      handler: 'src/appointment/setup.CreateAppointmentHandler',\r\n      events: [\r\n        {\r\n          http: {\r\n            method: 'post',\r\n            path: 'initalize',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    updateStatus: {\r\n      handler: 'src/appointment/setup.UpdateAppointmentStatusHandler',\r\n      events: [\r\n        {\r\n          http: {\r\n            method: 'post',\r\n            path: 'update-status',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  resources: {\r\n    Resources: {\r\n      AppointmentTopic: {\r\n        Type: 'AWS::SNS::Topic',\r\n        Properties: {\r\n          TopicName: 'AppointmentTopic'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = config;\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "0362ca83-3925-46ad-bab0-46f268338e9d",
    "orgName": "myproject12312",
    "userId": "yRFTnkns2vdrB0gTJ5",
    "userName": "myproject12312",
    "serviceProviderAwsAccountId": "520411743437",
    "serviceProviderAwsCfStackName": "ms-appointment-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:520411743437:stack/ms-appointment-dev/192f9200-282e-11f0-b87e-0affff62ff4d",
    "serviceProviderAwsCfStackCreated": "2025-05-03T14:51:30.578Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "UpdateStatusLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:520411743437:function:ms-appointment-dev-updateStatus:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-ms-appointment-dev-UpdateStatusLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "InitalizeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:520411743437:function:ms-appointment-dev-initalize:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-ms-appointment-dev-InitalizeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://ceo9yg8yc2.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-ms-appointment-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "ms-appointment-deployment",
        "ExportName": "sls-ms-appointment-dev-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "InitalizeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/ms-appointment-dev-initalize"
          }
        },
        "UpdateStatusLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/ms-appointment-dev-updateStatus"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "ms-appointment",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ms-appointment-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ms-appointment-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sns:*",
                        "dynamodb:*"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "ms-appointment",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "InitalizeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "ms-appointment-deployment",
              "S3Key": "serverless/ms-appointment/dev/1746284419773-2025-05-03T15:00:19.773Z/ms-appointment.zip"
            },
            "Handler": "src/appointment/setup.CreateAppointmentHandler",
            "Runtime": "nodejs18.x",
            "FunctionName": "ms-appointment-dev-initalize",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "SNS_TOPIC_ARN": {
                  "Ref": "AppointmentTopic"
                },
                "DYNAMO_TABLE_NAME": "appointments",
                "NODE_OPTIONS": "--enable-source-maps"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "InitalizeLogGroup"
          ]
        },
        "UpdateStatusLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "ms-appointment-deployment",
              "S3Key": "serverless/ms-appointment/dev/1746284419773-2025-05-03T15:00:19.773Z/ms-appointment.zip"
            },
            "Handler": "src/appointment/setup.UpdateAppointmentStatusHandler",
            "Runtime": "nodejs18.x",
            "FunctionName": "ms-appointment-dev-updateStatus",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "SNS_TOPIC_ARN": {
                  "Ref": "AppointmentTopic"
                },
                "DYNAMO_TABLE_NAME": "appointments",
                "NODE_OPTIONS": "--enable-source-maps"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateStatusLogGroup"
          ]
        },
        "InitalizeLambdaVersionWxBPJokILuOLJdCwqPR0RFqi7EQiMkdFNhyjjYs0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "InitalizeLambdaFunction"
            },
            "CodeSha256": "9HPHoeLr9zrT65QGTE9LG5MR1ZrnEkeITWiqcotoI/I="
          }
        },
        "UpdateStatusLambdaVersion1xmnXZWkZTDkT2Bebal5UR5FCtoFrTqqX1tQOc5wo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateStatusLambdaFunction"
            },
            "CodeSha256": "9HPHoeLr9zrT65QGTE9LG5MR1ZrnEkeITWiqcotoI/I="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-ms-appointment",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceInitalize": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "initalize",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUpdateDashstatus": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "update-status",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodInitalizePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceInitalize"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "InitalizeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "InitalizeLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUpdateDashstatusPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUpdateDashstatus"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateStatusLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UpdateStatusLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1746284413968": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodInitalizePost",
            "ApiGatewayMethodUpdateDashstatusPost"
          ]
        },
        "InitalizeLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "InitalizeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateStatusLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateStatusLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "AppointmentTopic": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "AppointmentTopic"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "ms-appointment-deployment",
          "Export": {
            "Name": "sls-ms-appointment-dev-ServerlessDeploymentBucketName"
          }
        },
        "InitalizeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "InitalizeLambdaVersionWxBPJokILuOLJdCwqPR0RFqi7EQiMkdFNhyjjYs0"
          },
          "Export": {
            "Name": "sls-ms-appointment-dev-InitalizeLambdaFunctionQualifiedArn"
          }
        },
        "UpdateStatusLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateStatusLambdaVersion1xmnXZWkZTDkT2Bebal5UR5FCtoFrTqqX1tQOc5wo"
          },
          "Export": {
            "Name": "sls-ms-appointment-dev-UpdateStatusLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-ms-appointment-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}